image:
  pullPolicy: Always
  repository: ghcr.io/timoschwarzer/btrfs-provisioner

serviceAccount:
  create: true
  name: btrfs-provisioner-service-account

roles:
  - name: btrfs-provisioner-cluster-role
    clusterRole: true
    rules:
      - apiGroups: [""]
        resources: ["persistentvolumeclaims", "configmaps"]
        verbs: ["get", "list", "watch"]
      - apiGroups: [""]
        resources: ["nodes"]
        verbs: ["get", "list", "watch", "patch"]
      - apiGroups: [""]
        resources: ["endpoints", "persistentvolumes", "pods"]
        verbs: ["*"]
      - apiGroups: [""]
        resources: ["events"]
        verbs: ["create", "patch"]
      - apiGroups: ["storage.k8s.io"]
        resources: ["storageclasses"]
        verbs: ["*"]
  - name: btrfs-provisioner-role
    clusterRole: false
    rules:
      - apiGroups: ["batch"]
        resources: ["jobs"]
        verbs: ["*"]

# Configuration for btrfs-provisioner
config:

  # The directory where volumes are stored
  volumesDir: /volumes

  # Archive volume contents instead of deleting them when the associated PersistentVolume is deleted
  # You need to clean up archives manually when you enable this option.
  archiveOnDelete: false

  # Options for the dynamic StorageClass
  dynamicStorageClass:
    # Enable the dynamic StorageClass (currently unsupported by btrfs-provisioner).
    # Disabling this will not remove an existing StorageClass
    enable: false
    # The name of the dynamic StorageClass
    name: btrfs-provisioner

  # Options for the per-node StorageClasses
  storageClassPerNode:
    # Enable per-node StorageClasses. Disabling this will not remove existing StorageClasses.
    enable: true
    # The name pattern after which the StorageClasses will be created
    # {} will be replaced by the name of the Node
    namePattern: btrfs-provisioner-{}

env:
  IMAGE: "{{ .Values.image.repository }}:{{ default .Chart.AppVersion .Values.image.tag }}"
  NAMESPACE: "{{ $.Release.Namespace }}"
  VOLUMES_DIR: "{{ .Values.config.volumesDir }}"
  ARCHIVE_ON_DELETE: "{{ .Values.config.archiveOnDelete }}"
  DYNAMIC_STORAGE_CLASS: "{{ .Values.config.dynamicStorageClass.enable }}"
  DYNAMIC_STORAGE_CLASS_NAME: "{{ .Values.config.dynamicStorageClassName }}"
  STORAGE_CLASS_PER_NODE: "{{ .Values.config.storageClassPerNode.enable }}"
  STORAGE_CLASS_PER_NODE_NAME_PATTERN: "{{ .Values.config.storageClassPerNode.namePattern }}"

service:
  main:
    enabled: false

probes:
  liveness:
    enabled: false

  readiness:
    enabled: false

  startup:
    enabled: false

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000

securityContext:
  capabilities:
    drop:
      - SETPCAP
      - MKNOD
      - AUDIT_WRITE
      - CHOWN
      - NET_RAW
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - SETGID
      - SETUID
      - NET_BIND_SERVICE
      - SYS_CHROOT
      - SETFCAP
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true

enableServiceLinks: false
